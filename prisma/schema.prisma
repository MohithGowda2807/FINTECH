generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wallets      Wallet[]
  transactions Transaction[]
  investments  Investment[]
  debts        Debt[]
  posts        Post[]
  comments     Comment[]
  taxes        TaxRecord[]
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Wallet {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  name      String
  type      WalletType
  balance   Decimal    @default(0) @db.Decimal(18, 2)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  transactionsFrom Transaction[] @relation("SourceWallet")
  transactionsTo   Transaction[] @relation("DestWallet")
}

enum WalletType {
  CASH
  SAVINGS
  UPI
  CREDIT_CARD
  INVESTMENT
}

model Transaction {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  date          DateTime
  amount        Decimal  @db.Decimal(18, 2)
  type          TxType
  category      String
  description   String?
  fee           Decimal? @db.Decimal(18, 2)
  source        Wallet?  @relation("SourceWallet", fields: [sourceId], references: [id])
  sourceId      String?
  destination   Wallet?  @relation("DestWallet", fields: [destinationId], references: [id])
  destinationId String?
  createdAt     DateTime @default(now())
}

enum TxType {
  INCOME
  EXPENSE
  TRANSFER
}

model Investment {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  assetType    AssetType
  fundName     String?
  amount       Decimal   @db.Decimal(18, 2)
  expectedCagr Decimal   @db.Decimal(5, 2)
  years        Int
  createdAt    DateTime  @default(now())
}

enum AssetType {
  INDEX_FUND
  LARGE_CAP
  MID_CAP
  SMALL_CAP
  DEBT_FUND
  GOLD
  LIQUID_FUND
  BOND_CORP
  BOND_GOVT
  REIT
  COMMODITY
  CRYPTO
}

model Debt {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  debtType   DebtType
  principal  Decimal  @db.Decimal(18, 2)
  annualRate Decimal  @db.Decimal(5, 2)
  emi        Decimal  @db.Decimal(18, 2)
  emisLeft   Int
  minPayment Decimal? @db.Decimal(18, 2)
  createdAt  DateTime @default(now())
}

enum DebtType {
  HOME_LOAN
  CAR_LOAN
  CREDIT_CARD
  EDUCATION_LOAN
  PERSONAL_LOAN
}

model TaxRecord {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  yearFY    String
  ltcg      Decimal  @default(0) @db.Decimal(18, 2)
  stcg      Decimal  @default(0) @db.Decimal(18, 2)
  lossLT    Decimal  @default(0) @db.Decimal(18, 2)
  lossST    Decimal  @default(0) @db.Decimal(18, 2)
  createdAt DateTime @default(now())
}

model Post {
  id        String    @id @default(cuid())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  title     String
  bodyMd    String
  anonymous Boolean   @default(false)
  tags      String[]
  createdAt DateTime  @default(now())
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  bodyMd    String
  createdAt DateTime @default(now())
}
